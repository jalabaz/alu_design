// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2020 10:28:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU_DESIGN
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_DESIGN_vlg_sample_tst(
	iA,
	iAluOpcode,
	iB,
	iClock,
	iRegACommand,
	iRegBCommand,
	sampler_tx
);
input [15:0] iA;
input [2:0] iAluOpcode;
input [15:0] iB;
input  iClock;
input [2:0] iRegACommand;
input [2:0] iRegBCommand;
output sampler_tx;

reg sample;
time current_time;
always @(iA or iAluOpcode or iB or iClock or iRegACommand or iRegBCommand)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_DESIGN_vlg_check_tst (
	nCarryflagout,
	nZeroflagout,
	oAccumulator,
	sampler_rx
);
input  nCarryflagout;
input  nZeroflagout;
input [15:0] oAccumulator;
input sampler_rx;

reg  nCarryflagout_expected;
reg  nZeroflagout_expected;
reg [15:0] oAccumulator_expected;

reg  nCarryflagout_prev;
reg  nZeroflagout_prev;
reg [15:0] oAccumulator_prev;

reg  nCarryflagout_expected_prev;
reg  nZeroflagout_expected_prev;
reg [15:0] oAccumulator_expected_prev;

reg  last_nCarryflagout_exp;
reg  last_nZeroflagout_exp;
reg [15:0] last_oAccumulator_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	nCarryflagout_prev = nCarryflagout;
	nZeroflagout_prev = nZeroflagout;
	oAccumulator_prev = oAccumulator;
end

// update expected /o prevs

always @(trigger)
begin
	nCarryflagout_expected_prev = nCarryflagout_expected;
	nZeroflagout_expected_prev = nZeroflagout_expected;
	oAccumulator_expected_prev = oAccumulator_expected;
end



// expected nCarryflagout
initial
begin
	nCarryflagout_expected = 1'bX;
end 

// expected nZeroflagout
initial
begin
	nZeroflagout_expected = 1'bX;
end 
// expected oAccumulator[ 15 ]
initial
begin
	oAccumulator_expected[15] = 1'bX;
end 
// expected oAccumulator[ 14 ]
initial
begin
	oAccumulator_expected[14] = 1'bX;
end 
// expected oAccumulator[ 13 ]
initial
begin
	oAccumulator_expected[13] = 1'bX;
end 
// expected oAccumulator[ 12 ]
initial
begin
	oAccumulator_expected[12] = 1'bX;
end 
// expected oAccumulator[ 11 ]
initial
begin
	oAccumulator_expected[11] = 1'bX;
end 
// expected oAccumulator[ 10 ]
initial
begin
	oAccumulator_expected[10] = 1'bX;
end 
// expected oAccumulator[ 9 ]
initial
begin
	oAccumulator_expected[9] = 1'bX;
end 
// expected oAccumulator[ 8 ]
initial
begin
	oAccumulator_expected[8] = 1'bX;
end 
// expected oAccumulator[ 7 ]
initial
begin
	oAccumulator_expected[7] = 1'bX;
end 
// expected oAccumulator[ 6 ]
initial
begin
	oAccumulator_expected[6] = 1'bX;
end 
// expected oAccumulator[ 5 ]
initial
begin
	oAccumulator_expected[5] = 1'bX;
end 
// expected oAccumulator[ 4 ]
initial
begin
	oAccumulator_expected[4] = 1'bX;
end 
// expected oAccumulator[ 3 ]
initial
begin
	oAccumulator_expected[3] = 1'bX;
end 
// expected oAccumulator[ 2 ]
initial
begin
	oAccumulator_expected[2] = 1'bX;
end 
// expected oAccumulator[ 1 ]
initial
begin
	oAccumulator_expected[1] = 1'bX;
end 
// expected oAccumulator[ 0 ]
initial
begin
	oAccumulator_expected[0] = 1'bX;
end 
// generate trigger
always @(nCarryflagout_expected or nCarryflagout or nZeroflagout_expected or nZeroflagout or oAccumulator_expected or oAccumulator)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected nCarryflagout = %b | expected nZeroflagout = %b | expected oAccumulator = %b | ",nCarryflagout_expected_prev,nZeroflagout_expected_prev,oAccumulator_expected_prev);
	$display("| real nCarryflagout = %b | real nZeroflagout = %b | real oAccumulator = %b | ",nCarryflagout_prev,nZeroflagout_prev,oAccumulator_prev);
`endif
	if (
		( nCarryflagout_expected_prev !== 1'bx ) && ( nCarryflagout_prev !== nCarryflagout_expected_prev )
		&& ((nCarryflagout_expected_prev !== last_nCarryflagout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nCarryflagout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nCarryflagout_expected_prev);
		$display ("     Real value = %b", nCarryflagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_nCarryflagout_exp = nCarryflagout_expected_prev;
	end
	if (
		( nZeroflagout_expected_prev !== 1'bx ) && ( nZeroflagout_prev !== nZeroflagout_expected_prev )
		&& ((nZeroflagout_expected_prev !== last_nZeroflagout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nZeroflagout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nZeroflagout_expected_prev);
		$display ("     Real value = %b", nZeroflagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nZeroflagout_exp = nZeroflagout_expected_prev;
	end
	if (
		( oAccumulator_expected_prev[0] !== 1'bx ) && ( oAccumulator_prev[0] !== oAccumulator_expected_prev[0] )
		&& ((oAccumulator_expected_prev[0] !== last_oAccumulator_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[0] = oAccumulator_expected_prev[0];
	end
	if (
		( oAccumulator_expected_prev[1] !== 1'bx ) && ( oAccumulator_prev[1] !== oAccumulator_expected_prev[1] )
		&& ((oAccumulator_expected_prev[1] !== last_oAccumulator_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[1] = oAccumulator_expected_prev[1];
	end
	if (
		( oAccumulator_expected_prev[2] !== 1'bx ) && ( oAccumulator_prev[2] !== oAccumulator_expected_prev[2] )
		&& ((oAccumulator_expected_prev[2] !== last_oAccumulator_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[2] = oAccumulator_expected_prev[2];
	end
	if (
		( oAccumulator_expected_prev[3] !== 1'bx ) && ( oAccumulator_prev[3] !== oAccumulator_expected_prev[3] )
		&& ((oAccumulator_expected_prev[3] !== last_oAccumulator_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[3] = oAccumulator_expected_prev[3];
	end
	if (
		( oAccumulator_expected_prev[4] !== 1'bx ) && ( oAccumulator_prev[4] !== oAccumulator_expected_prev[4] )
		&& ((oAccumulator_expected_prev[4] !== last_oAccumulator_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[4] = oAccumulator_expected_prev[4];
	end
	if (
		( oAccumulator_expected_prev[5] !== 1'bx ) && ( oAccumulator_prev[5] !== oAccumulator_expected_prev[5] )
		&& ((oAccumulator_expected_prev[5] !== last_oAccumulator_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[5] = oAccumulator_expected_prev[5];
	end
	if (
		( oAccumulator_expected_prev[6] !== 1'bx ) && ( oAccumulator_prev[6] !== oAccumulator_expected_prev[6] )
		&& ((oAccumulator_expected_prev[6] !== last_oAccumulator_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[6] = oAccumulator_expected_prev[6];
	end
	if (
		( oAccumulator_expected_prev[7] !== 1'bx ) && ( oAccumulator_prev[7] !== oAccumulator_expected_prev[7] )
		&& ((oAccumulator_expected_prev[7] !== last_oAccumulator_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[7] = oAccumulator_expected_prev[7];
	end
	if (
		( oAccumulator_expected_prev[8] !== 1'bx ) && ( oAccumulator_prev[8] !== oAccumulator_expected_prev[8] )
		&& ((oAccumulator_expected_prev[8] !== last_oAccumulator_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[8] = oAccumulator_expected_prev[8];
	end
	if (
		( oAccumulator_expected_prev[9] !== 1'bx ) && ( oAccumulator_prev[9] !== oAccumulator_expected_prev[9] )
		&& ((oAccumulator_expected_prev[9] !== last_oAccumulator_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[9] = oAccumulator_expected_prev[9];
	end
	if (
		( oAccumulator_expected_prev[10] !== 1'bx ) && ( oAccumulator_prev[10] !== oAccumulator_expected_prev[10] )
		&& ((oAccumulator_expected_prev[10] !== last_oAccumulator_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[10] = oAccumulator_expected_prev[10];
	end
	if (
		( oAccumulator_expected_prev[11] !== 1'bx ) && ( oAccumulator_prev[11] !== oAccumulator_expected_prev[11] )
		&& ((oAccumulator_expected_prev[11] !== last_oAccumulator_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[11] = oAccumulator_expected_prev[11];
	end
	if (
		( oAccumulator_expected_prev[12] !== 1'bx ) && ( oAccumulator_prev[12] !== oAccumulator_expected_prev[12] )
		&& ((oAccumulator_expected_prev[12] !== last_oAccumulator_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[12] = oAccumulator_expected_prev[12];
	end
	if (
		( oAccumulator_expected_prev[13] !== 1'bx ) && ( oAccumulator_prev[13] !== oAccumulator_expected_prev[13] )
		&& ((oAccumulator_expected_prev[13] !== last_oAccumulator_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[13] = oAccumulator_expected_prev[13];
	end
	if (
		( oAccumulator_expected_prev[14] !== 1'bx ) && ( oAccumulator_prev[14] !== oAccumulator_expected_prev[14] )
		&& ((oAccumulator_expected_prev[14] !== last_oAccumulator_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[14] = oAccumulator_expected_prev[14];
	end
	if (
		( oAccumulator_expected_prev[15] !== 1'bx ) && ( oAccumulator_prev[15] !== oAccumulator_expected_prev[15] )
		&& ((oAccumulator_expected_prev[15] !== last_oAccumulator_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oAccumulator[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oAccumulator_expected_prev);
		$display ("     Real value = %b", oAccumulator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oAccumulator_exp[15] = oAccumulator_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_DESIGN_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] iA;
reg [2:0] iAluOpcode;
reg [15:0] iB;
reg iClock;
reg [2:0] iRegACommand;
reg [2:0] iRegBCommand;
// wires                                               
wire nCarryflagout;
wire nZeroflagout;
wire [15:0] oAccumulator;

wire sampler;                             

// assign statements (if any)                          
ALU_DESIGN i1 (
// port map - connection between master ports and signals/registers   
	.iA(iA),
	.iAluOpcode(iAluOpcode),
	.iB(iB),
	.iClock(iClock),
	.iRegACommand(iRegACommand),
	.iRegBCommand(iRegBCommand),
	.nCarryflagout(nCarryflagout),
	.nZeroflagout(nZeroflagout),
	.oAccumulator(oAccumulator)
);
// iA[ 15 ]
initial
begin
	iA[15] = 1'b0;
	iA[15] = #100000 1'b1;
	iA[15] = #200000 1'b0;
	iA[15] = #300000 1'b1;
	iA[15] = #100000 1'b0;
end 
// iA[ 14 ]
initial
begin
	iA[14] = 1'b0;
	iA[14] = #200000 1'b1;
	iA[14] = #500000 1'b0;
	iA[14] = #100000 1'b1;
	iA[14] = #100000 1'b0;
end 
// iA[ 13 ]
initial
begin
	iA[13] = 1'b0;
	iA[13] = #100000 1'b1;
	iA[13] = #200000 1'b0;
	iA[13] = #300000 1'b1;
	iA[13] = #200000 1'b0;
	iA[13] = #100000 1'b1;
end 
// iA[ 12 ]
initial
begin
	iA[12] = 1'b1;
	iA[12] = #100000 1'b0;
	iA[12] = #100000 1'b1;
	iA[12] = #500000 1'b0;
	iA[12] = #100000 1'b1;
	iA[12] = #100000 1'b0;
end 
// iA[ 11 ]
initial
begin
	iA[11] = 1'b1;
	iA[11] = #200000 1'b0;
	iA[11] = #700000 1'b1;
end 
// iA[ 10 ]
initial
begin
	iA[10] = 1'b0;
	iA[10] = #200000 1'b1;
	iA[10] = #400000 1'b0;
end 
// iA[ 9 ]
initial
begin
	iA[9] = 1'b0;
	iA[9] = #100000 1'b1;
	iA[9] = #100000 1'b0;
	iA[9] = #200000 1'b1;
	iA[9] = #300000 1'b0;
	iA[9] = #200000 1'b1;
end 
// iA[ 8 ]
initial
begin
	iA[8] = 1'b0;
	iA[8] = #100000 1'b1;
	iA[8] = #100000 1'b0;
	iA[8] = #300000 1'b1;
	iA[8] = #100000 1'b0;
end 
// iA[ 7 ]
initial
begin
	iA[7] = 1'b0;
	iA[7] = #100000 1'b1;
	iA[7] = #200000 1'b0;
	iA[7] = #200000 1'b1;
	iA[7] = #100000 1'b0;
	iA[7] = #100000 1'b1;
	iA[7] = #100000 1'b0;
	iA[7] = #100000 1'b1;
end 
// iA[ 6 ]
initial
begin
	iA[6] = 1'b1;
	iA[6] = #100000 1'b0;
	iA[6] = #200000 1'b1;
end 
// iA[ 5 ]
initial
begin
	iA[5] = 1'b0;
	iA[5] = #200000 1'b1;
	iA[5] = #300000 1'b0;
	iA[5] = #100000 1'b1;
	iA[5] = #100000 1'b0;
	iA[5] = #100000 1'b1;
	iA[5] = #100000 1'b0;
end 
// iA[ 4 ]
initial
begin
	iA[4] = 1'b1;
	iA[4] = #200000 1'b0;
	iA[4] = #100000 1'b1;
	iA[4] = #500000 1'b0;
end 
// iA[ 3 ]
initial
begin
	iA[3] = 1'b0;
	iA[3] = #600000 1'b1;
	iA[3] = #100000 1'b0;
	iA[3] = #100000 1'b1;
end 
// iA[ 2 ]
initial
begin
	iA[2] = 1'b0;
	iA[2] = #100000 1'b1;
	iA[2] = #100000 1'b0;
	iA[2] = #200000 1'b1;
	iA[2] = #100000 1'b0;
	iA[2] = #200000 1'b1;
end 
// iA[ 1 ]
initial
begin
	iA[1] = 1'b1;
	iA[1] = #200000 1'b0;
	iA[1] = #400000 1'b1;
	iA[1] = #100000 1'b0;
end 
// iA[ 0 ]
initial
begin
	iA[0] = 1'b0;
	iA[0] = #200000 1'b1;
	iA[0] = #300000 1'b0;
	iA[0] = #100000 1'b1;
	iA[0] = #100000 1'b0;
	iA[0] = #200000 1'b1;
end 
// iB[ 15 ]
initial
begin
	iB[15] = 1'b1;
	iB[15] = #200000 1'b0;
	iB[15] = #400000 1'b1;
	iB[15] = #100000 1'b0;
	iB[15] = #100000 1'b1;
	iB[15] = #100000 1'b0;
end 
// iB[ 14 ]
initial
begin
	iB[14] = 1'b1;
	iB[14] = #300000 1'b0;
	iB[14] = #300000 1'b1;
end 
// iB[ 13 ]
initial
begin
	iB[13] = 1'b0;
	iB[13] = #700000 1'b1;
end 
// iB[ 12 ]
initial
begin
	iB[12] = 1'b0;
	iB[12] = #100000 1'b1;
	iB[12] = #100000 1'b0;
	iB[12] = #200000 1'b1;
	iB[12] = #200000 1'b0;
	iB[12] = #200000 1'b1;
end 
// iB[ 11 ]
initial
begin
	iB[11] = 1'b0;
	iB[11] = #100000 1'b1;
	iB[11] = #300000 1'b0;
	iB[11] = #200000 1'b1;
	iB[11] = #200000 1'b0;
	iB[11] = #100000 1'b1;
end 
// iB[ 10 ]
initial
begin
	iB[10] = 1'b0;
	iB[10] = #100000 1'b1;
	iB[10] = #300000 1'b0;
	iB[10] = #100000 1'b1;
	iB[10] = #100000 1'b0;
	iB[10] = #300000 1'b1;
end 
// iB[ 9 ]
initial
begin
	iB[9] = 1'b0;
	iB[9] = #100000 1'b1;
	iB[9] = #200000 1'b0;
	iB[9] = #100000 1'b1;
	iB[9] = #300000 1'b0;
end 
// iB[ 8 ]
initial
begin
	iB[8] = 1'b0;
	iB[8] = #100000 1'b1;
	iB[8] = #300000 1'b0;
	iB[8] = #100000 1'b1;
	iB[8] = #100000 1'b0;
	iB[8] = #100000 1'b1;
	iB[8] = #100000 1'b0;
	iB[8] = #100000 1'b1;
end 
// iB[ 7 ]
initial
begin
	iB[7] = 1'b0;
	iB[7] = #200000 1'b1;
	iB[7] = #100000 1'b0;
	iB[7] = #100000 1'b1;
	iB[7] = #200000 1'b0;
	iB[7] = #100000 1'b1;
	iB[7] = #200000 1'b0;
end 
// iB[ 6 ]
initial
begin
	iB[6] = 1'b0;
	iB[6] = #300000 1'b1;
	iB[6] = #100000 1'b0;
	iB[6] = #300000 1'b1;
	iB[6] = #100000 1'b0;
	iB[6] = #100000 1'b1;
end 
// iB[ 5 ]
initial
begin
	iB[5] = 1'b0;
	iB[5] = #200000 1'b1;
	iB[5] = #400000 1'b0;
	iB[5] = #100000 1'b1;
	iB[5] = #100000 1'b0;
end 
// iB[ 4 ]
initial
begin
	iB[4] = 1'b1;
	iB[4] = #100000 1'b0;
	iB[4] = #100000 1'b1;
	iB[4] = #200000 1'b0;
	iB[4] = #100000 1'b1;
	iB[4] = #300000 1'b0;
end 
// iB[ 3 ]
initial
begin
	iB[3] = 1'b0;
	iB[3] = #600000 1'b1;
	iB[3] = #200000 1'b0;
	iB[3] = #100000 1'b1;
end 
// iB[ 2 ]
initial
begin
	iB[2] = 1'b0;
	iB[2] = #100000 1'b1;
	iB[2] = #300000 1'b0;
	iB[2] = #100000 1'b1;
	iB[2] = #100000 1'b0;
end 
// iB[ 1 ]
initial
begin
	iB[1] = 1'b0;
	iB[1] = #300000 1'b1;
	iB[1] = #100000 1'b0;
	iB[1] = #200000 1'b1;
	iB[1] = #100000 1'b0;
end 
// iB[ 0 ]
initial
begin
	iB[0] = 1'b0;
	iB[0] = #100000 1'b1;
	iB[0] = #100000 1'b0;
	iB[0] = #100000 1'b1;
	iB[0] = #200000 1'b0;
	iB[0] = #100000 1'b1;
	iB[0] = #300000 1'b0;
end 
// iAluOpcode[ 2 ]
initial
begin
	iAluOpcode[2] = 1'b1;
end 
// iAluOpcode[ 1 ]
initial
begin
	iAluOpcode[1] = 1'b1;
end 
// iAluOpcode[ 0 ]
initial
begin
	iAluOpcode[0] = 1'b1;
end 

// iClock
always
begin
	iClock = 1'b0;
	iClock = #5000 1'b1;
	#5000;
end 
// iRegACommand[ 2 ]
initial
begin
	iRegACommand[2] = 1'b0;
	iRegACommand[2] = #100000 1'b1;
	iRegACommand[2] = #500000 1'b0;
	iRegACommand[2] = #200000 1'b1;
	iRegACommand[2] = #100000 1'b0;
end 
// iRegACommand[ 1 ]
initial
begin
	iRegACommand[1] = 1'b0;
	iRegACommand[1] = #400000 1'b1;
	iRegACommand[1] = #100000 1'b0;
	iRegACommand[1] = #100000 1'b1;
	iRegACommand[1] = #100000 1'b0;
end 
// iRegACommand[ 0 ]
initial
begin
	iRegACommand[0] = 1'b1;
	iRegACommand[0] = #100000 1'b0;
	iRegACommand[0] = #100000 1'b1;
	iRegACommand[0] = #200000 1'b0;
	iRegACommand[0] = #200000 1'b1;
	iRegACommand[0] = #100000 1'b0;
	iRegACommand[0] = #100000 1'b1;
end 
// iRegBCommand[ 2 ]
initial
begin
	iRegBCommand[2] = 1'b1;
	iRegBCommand[2] = #200000 1'b0;
	iRegBCommand[2] = #200000 1'b1;
	iRegBCommand[2] = #100000 1'b0;
	iRegBCommand[2] = #100000 1'b1;
	iRegBCommand[2] = #200000 1'b0;
end 
// iRegBCommand[ 1 ]
initial
begin
	iRegBCommand[1] = 1'b0;
	iRegBCommand[1] = #100000 1'b1;
	iRegBCommand[1] = #100000 1'b0;
	iRegBCommand[1] = #200000 1'b1;
	iRegBCommand[1] = #100000 1'b0;
	iRegBCommand[1] = #100000 1'b1;
	iRegBCommand[1] = #100000 1'b0;
end 
// iRegBCommand[ 0 ]
initial
begin
	iRegBCommand[0] = 1'b0;
	iRegBCommand[0] = #300000 1'b1;
	iRegBCommand[0] = #100000 1'b0;
	iRegBCommand[0] = #200000 1'b1;
	iRegBCommand[0] = #300000 1'b0;
end 

ALU_DESIGN_vlg_sample_tst tb_sample (
	.iA(iA),
	.iAluOpcode(iAluOpcode),
	.iB(iB),
	.iClock(iClock),
	.iRegACommand(iRegACommand),
	.iRegBCommand(iRegBCommand),
	.sampler_tx(sampler)
);

ALU_DESIGN_vlg_check_tst tb_out(
	.nCarryflagout(nCarryflagout),
	.nZeroflagout(nZeroflagout),
	.oAccumulator(oAccumulator),
	.sampler_rx(sampler)
);
endmodule

